name: main-latest

on:
  push:
    branches: [ "main" ]
  schedule:
    - cron: '52 3 * * *' # Scheduled runs every day at 3:52am UTC

env:
  GEOIP_UPDATER_VERSION: "1.6.0" # https://github.com/crazy-max/geoip-updater/releases

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache MaxMind stuff # don't hammer them with my key more than strictly necessary.
        uses: actions/cache@v2
        with:
          path: ./geoip
          key: ${{ runner.os }}-geoip2

      # Grab MaxMind's GeoIP databases by using a nifty utility.
      - name: Grab MaxMind's GeoIP databases
        run: |
          mkdir -p geoip
          cd geoip
          echo "Grabbing GeoIP databases..."
          if [[ ! -f geoip-updater_${GEOIP_UPDATER_VERSION}_linux_amd64.tar.gz ]]; then
            echo "geoip-updater not found, downloading..."
            wget --no-verbose "https://github.com/crazy-max/geoip-updater/releases/download/v${GEOIP_UPDATER_VERSION}/geoip-updater_${GEOIP_UPDATER_VERSION}_linux_amd64.tar.gz"
            tar xzf geoip-updater_${GEOIP_UPDATER_VERSION}_linux_amd64.tar.gz
          else
            echo "Downloader already there, cache hit?" 
          fi
          echo "Grabbing GeoIP databases..."
          ./geoip-updater --edition-ids=GeoLite2-City,GeoLite2-ASN --license-key=${{ secrets.MAXMIND_LICENSE_KEY }} --log-level debug --download-path=./mmdb
          echo "Done with grabbing." 

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildxarch-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildxarch-

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # github username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # github actions builtin token. repo has to have pkg access.

      - name: Prepare
        id: prep
        run: |
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=dailytag::$(date -u +'%Y-%m-%d')

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        continue-on-error: true # dont fail here, for caching purposes.
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          pull: true # pull for latest alpine always, avoid bit rot
          push: true
          tags: ghcr.io/${{ github.repository }}:latest,ghcr.io/${{ github.repository }}:${{ steps.prep.outputs.dailytag }},${{ github.repository }}:latest,${{ github.repository }}:${{ steps.prep.outputs.dailytag }}
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
          cache-from: type=local,src=/tmp/.buildx-cache/release
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache/release

